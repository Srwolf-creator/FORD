let nuevosDatos_s = [];
let nuevosDatosHoja_s = [];

function obtenerDatosYActualizar_s() {
  console.log("Inicio de la función obtenerDatosYActualizar_s()");
  console.time("Función completa");

  // IDs de las hojas de cálculo principales y su correspondiente base (P1, P2, etc.)
  console.time("Configuración inicial");
  const ids = [
    { id: '1dhG5ZzEW1pj1LOA57Js-FUsQpJia8-Z1S_1zu5zTk8U', base: 'S1' },
    { id: '1cd0Uc4X9GckQrC5sRocyLyeHfT7eIuEE7K_zNxjm7fM', base: 'S2' },
    { id: '16s0842xmccrUv-SzpAFfvc3CXKCYtGrnk9GJqcR0HR8', base: 'S3' },
    { id: '1Q2H03yvb0oBP-jWpTgKyESa12vCVdCerkk9hyqSKmA0', base: 'S4' },
    { id: '18MmqOg5HAU372gYq0VesfLpskb33DSnoSQgHYpv3Igg', base: 'S5' },
    { id: '1xwDuRb-KJMM5H0jXnl8XDLcBEgz9miekkOQESriyfoc', base: 'S6' },
    { id: '1cP5K1I3LOIUuT0SiAABgXpCxreM1p-oJR60O0fpi9aw', base: 'S7' },
    { id: '1eLmm59Gq9bpSaGLc3pqJZao2F0RznyhV2EYeExv-s2U', base: 'S8' }
  ];
  
  const pesosProcesos = {
    agendamiento: 25,
    recepcion: 20,
    servicio: 20,
    entrega: 25,
    relCliente: 10,
    instalaciones: 10,
    gerenciamiento: 10
  };
  
  const consId = '1FWpTR65G5WLzIRraTtAejRq24aojsJYv5x7S_KZ44lg';
  console.timeEnd("Configuración inicial");

  // Columnas a extraer de las hojas principales
  console.time("Obtener datos de SUBPROCESOS y COORDENADAS");
  const columnas = {
    pais: 'C',
    ciclo: 'E',
    codigo: 'G',
    concesionario: 'F',
    ciudad: 'D',
    fechaVisita: 'A',
    sede: 'H'
  };

  const columnasCons = {
    pregunta: 'C',
    proceso: 'G',
    subproceso: 'H',
    elemento: 'I',
    numElemento: 'E',
    numPeso: 'K', 
    porPeso: 'L'
  };

  const consSpreadsheet = SpreadsheetApp.openById(consId);
  const consSheet = consSpreadsheet.getSheetByName('SUBPROCESOS');
  const consData = consSheet.getDataRange().getValues();

  const coordSheet = consSpreadsheet.getSheetByName('COORDENADAS');
  if (!coordSheet) {
    console.error("No se encontró la hoja COORDENADAS");
    return;
  }
  const coordData = coordSheet.getDataRange().getValues();
  console.timeEnd("Obtener datos de SUBPROCESOS y COORDENADAS");

  function buscarCoordenada(pais, concesionario, sede, ciudad) {
    const normalize = (str) => String(str).trim().toUpperCase();
    
    for (let i = 1; i < coordData.length; i++) {
      const row = coordData[i];
      if (row.length < 5) continue;
      
      if (normalize(row[0]) === normalize(pais) &&
          normalize(row[1]) === normalize(concesionario) &&
          normalize(row[2]) === normalize(sede) &&
          normalize(row[3]) === normalize(ciudad)) {
        return row[4] || "";
      }
    }
    return "";
  }

  // Procesar cada hoja principal
  console.time("Procesar todas las hojas principales");
  ids.forEach(({ id, base }, index) => {
    console.time(`Procesar hoja ${base} (${index+1}/${ids.length})`);
    
    const spreadsheet = SpreadsheetApp.openById(id);
    const sheet = spreadsheet.getSheetByName('Respuestas de formulario 1');
    const formatoSheet = spreadsheet.getSheetByName('Formato');

    console.time(`Obtener datos de hoja ${base}`);
    const data = sheet.getDataRange().getValues();
    console.timeEnd(`Obtener datos de hoja ${base}`);

    console.time(`Procesar preguntas de ${base}`);
    const preguntas = data[0].slice(10);
    const ultimaPregunta = preguntas.findIndex(p => p === '');
    const preguntasFiltradas = ultimaPregunta === -1 ? preguntas : preguntas.slice(0, ultimaPregunta);
    console.timeEnd(`Procesar preguntas de ${base}`);

    console.time(`Procesar filas de datos de ${base}`);
    const dataconteoP = {};
    const dataResp = {};
    
    data.slice(1).forEach((row) => {
      const pais = row[columnas.pais.charCodeAt(0) - 65];
      const ciclo = row[columnas.ciclo.charCodeAt(0) - 65];
      const codigo = row[columnas.codigo.charCodeAt(0) - 65];
      const concesionario = row[columnas.concesionario.charCodeAt(0) - 65];
      const ciudad = row[columnas.ciudad.charCodeAt(0) - 65];
      const fechaVisita = row[columnas.fechaVisita.charCodeAt(0) - 65];
      const sede = row[columnas.sede.charCodeAt(0) - 65];
      const fechaFormateada = Utilities.formatDate(new Date(fechaVisita), Session.getScriptTimeZone(), 'dd/MM/yyyy');

      preguntasFiltradas.forEach((pregunta, colIndex) => {
        const respuesta = row[10 + colIndex];
        if (respuesta !== '') {
          const filaCons = consData.find(fila => fila[columnasCons.pregunta.charCodeAt(0) - 65] === pregunta);
          const proceso = filaCons ? filaCons[columnasCons.proceso.charCodeAt(0) - 65] : '';
          const subproceso = filaCons ? filaCons[columnasCons.subproceso.charCodeAt(0) - 65] : '';
          const elemento = filaCons ? filaCons[columnasCons.elemento.charCodeAt(0) - 65] : '';
          const numElemento = filaCons ? filaCons[columnasCons.numElemento.charCodeAt(0) - 65] : '';
          const numPeso = filaCons ? filaCons[columnasCons.numPeso.charCodeAt(0) - 65] : '';
          const porPeso = filaCons ? filaCons[columnasCons.porPeso.charCodeAt(0) - 65] : '';
          const concat = `${pais}-${ciclo}-${codigo}-${concesionario}-${ciudad}-${fechaFormateada}-${id}-${base}-${numElemento}`;

          if (!dataconteoP[concat]) {
            dataconteoP[concat] = 1;
            dataResp[concat] = (respuesta === 'Si') ? 1 : 0;
          } else {
            dataconteoP[concat] += 1;
            if (respuesta === 'Si') dataResp[concat] += 1;
          }

          nuevosDatosHoja_s.push({
            pais, ciclo, codigo, concesionario, ciudad, fechaVisita, pregunta, 
            respuesta, proceso, subproceso, elemento, numElemento, sede, base, 
            concat, conteoP: null, puntajeP: null, aprobacion: null, numPeso, porPeso
          });
        }
      });
    });
    console.timeEnd(`Procesar filas de datos de ${base}`);

    console.time(`Calcular aprobaciones para ${base}`);
    nuevosDatosHoja_s.forEach(item => {
      const key = item.concat;
      if (dataconteoP[key]) {
        item.conteoP = dataconteoP[key];
        item.puntajeP = dataResp[key];
        item.aprobacion = (dataconteoP[key] === dataResp[key]) ? 'SI' : 'NO';
      }
    });
    console.timeEnd(`Calcular aprobaciones para ${base}`);

    nuevosDatos_s = nuevosDatos_s.concat(nuevosDatosHoja_s);

    console.time(`Generar resumen para ${base}`);
    let newDic = {};
    nuevosDatosHoja_s.forEach((item) => {
      if (!item.numElemento || !item.concat) return;
      
      const coordenada = buscarCoordenada(item.pais, item.concesionario, item.sede, item.ciudad);
      const newKey = item.concat;   

      if (!newDic[newKey]) {
        newDic[newKey] = {
          paisNew: item.pais,
          cicloNew: item.ciclo,
          codigoNew: item.codigo,
          concesionairoNew: item.concesionario,
          ciudadNew: item.ciudad,
          fechavisitaNew: item.fechaVisita,
          procesoNew: item.proceso,
          subprocesoNew: item.subproceso,
          elementoNew: item.elemento,
          numElementoNew: item.numElemento,
          sedeNew: item.sede,
          baseNew: item.base,
          concatNew: item.concat,
          aprobacionNew: item.aprobacion,
          numPesoNew: item.numPeso,
          porPesoNew: item.porPeso,
          puntajeMaximoNew: item.aprobacion === 'SI' ? item.numPeso : 0,
          calificacionNew: item.aprobacion === 'SI' ? item.porPeso : 0,
          coordenadaNew: coordenada
        };
      }
    });
    console.timeEnd(`Generar resumen para ${base}`);

    const processDictionary = {
      agendamiento: "1. AGENDAMIENTO",
      recepcion: "2. RECEPCION",
      servicio: "3. SERVICIO",
      entrega: "4. ENTREGA",
      relCliente: "5. RELACION CON EL CLIENTE",
      instalaciones: "6. INSTALACIONES",
      gerenciamiento: "7. GERENCIAMIENTO"
    }

    console.time(`Calcular porcentajes para ${base}`);
    let newData = {};
    Object.values(newDic).forEach(item => {
      const consede = `${item.concesionairoNew} - ${item.sedeNew}`;
      let porcentajeStr = '0';
      if (typeof item.calificacionNew === 'string') {
        porcentajeStr = item.calificacionNew.replace('%', '') || '0';
      } else if (typeof item.calificacionNew === 'number') {
        porcentajeStr = item.calificacionNew.toString();
      }

      const porcentaje = parseFloat(porcentajeStr) || 0;

      if (!newData[consede]) {
        newData[consede] = {
          consede: consede,
          codigo: item.codigoNew,
          ciclo: item.cicloNew,
          pais: item.paisNew,
          ciudad: item.ciudadNew,
          concesionario: item.concesionairoNew,
          sede: item.sedeNew,
          nameSede: item.sedeNew,
          total: null,
          agendamiento: null,
          recepcion:null,
          servicio: null,
          entrega: null,
          relCliente: null,
          instalaciones: null,
          gerenciamiento: null
        };
      }

      const proceso = item.procesoNew;
      if (proceso === processDictionary.agendamiento) {
        newData[consede].agendamiento += porcentaje;
      } else if (proceso === processDictionary.recepcion) {
        newData[consede].recepcion += porcentaje;
      } else if (proceso === processDictionary.servicio) {
        newData[consede].servicio += porcentaje;      
      } else if (proceso === processDictionary.entrega) {
        newData[consede].entrega += porcentaje;
      } else if (proceso === processDictionary.relCliente) {
        newData[consede].relCliente += porcentaje;
      } else if (proceso === processDictionary.instalaciones) {
        newData[consede].instalaciones += porcentaje;
      } else if (proceso === processDictionary.gerenciamiento) {
        newData[consede].gerenciamiento += porcentaje;
      }
    });
    console.timeEnd(`Calcular porcentajes para ${base}`);

    console.time(`Aplicar pesos para ${base}`);
    for (const dataKey in newData) {
      let totalOptAge = newData[dataKey].agendamiento || 0
      let totalOptRec = newData[dataKey].recepcion || 0
      let totalOptSer = newData[dataKey].servicio || 0
      let totalOptEnt = newData[dataKey].entrega || 0
      let totalOptRel = newData[dataKey].relCliente || 0 
      let totalOptIns = newData[dataKey].instalaciones || 0 
      let totalOptGer = newData[dataKey].gerenciamiento || 0 

      let porcentajeAge = (totalOptAge * pesosProcesos.agendamiento)
      let porcentajeRec = (totalOptRec * pesosProcesos.recepcion) 
      let porcentajeSer = (totalOptSer * pesosProcesos.servicio)
      let porcentajeEnt = (totalOptEnt * pesosProcesos.entrega)
      let porcentajeRel = (totalOptRel * pesosProcesos.relCliente)
      let porcentajeIns = (totalOptIns * pesosProcesos.instalaciones)
      let porcentajeGer = (totalOptGer * pesosProcesos.gerenciamiento)
      
      newData[dataKey].agendamiento = `${porcentajeAge.toFixed(2)}%`
      newData[dataKey].recepcion = `${porcentajeRec.toFixed(2)}%`
      newData[dataKey].servicio = `${porcentajeSer.toFixed(2)}%`
      newData[dataKey].entrega = `${porcentajeEnt.toFixed(2)}%`
      newData[dataKey].relCliente = `${porcentajeRel.toFixed(2)}%`
      newData[dataKey].instalaciones = `${porcentajeIns.toFixed(2)}%`
      newData[dataKey].gerenciamiento = `${porcentajeGer.toFixed(2)}%`

      let totalGen = porcentajeAge + porcentajeRec + porcentajeSer + porcentajeEnt + porcentajeRel+ porcentajeIns + porcentajeGer

      newData[dataKey].total = `${totalGen.toFixed(2)}%`
    }
    console.timeEnd(`Aplicar pesos para ${base}`);

    const newArrayData = Object.values(newData)

    console.time(`Escribir datos en hojas de resultado para ${base}`);
    const spreadsheetEf = SpreadsheetApp.openById(consId);
    const formatoSheetEf = spreadsheetEf.getSheetByName('Servicio - EF');
    formatoSheetEf.clear();
    formatoSheetEf.getRange(1, 1, 1, 19).setValues([[
      'pais', 'ciclo', 'Código', 'Concesionario', 'Ciudad', 'FechaVisita', 'Proceso', 'Subproceso', 'Elemento', 'numElemento', 'Sede', 'Base', 'Concatenado', 'aprobacion', 'numPeso', 'porPeso', 'Puntaje', 'Calificacion', 'Coordenada'
    ]]);
    
    const datosFinales = Object.values(newDic);
    if (datosFinales.length > 0) {
      const valoresFinales = datosFinales.map(obj => Object.values(obj));
      formatoSheetEf.getRange(2, 1, valoresFinales.length, valoresFinales[0].length).setValues(valoresFinales);
    } else {
      console.log(`No se encontraron datos para agregar a la hoja 'Servicio - EF' en ${base}.`);
    }

    const formatoSheetDg = spreadsheetEf.getSheetByName('Diagnostico - Manual Servicio');
    formatoSheetDg.clear();
    formatoSheetDg.getRange(1, 1, 1, 16).setValues([[
      'Concesionario - sede', 'Código','Ciclo', 'País', 'Ciudad', 'Concesionario', 'Sede', 'Nombre Sede', 'Total', '1. AGENDAMIENTO', '2. RECEPCION', '3. SERVICIO', '4. ENTREGA', '5. RELACIONAMIENTO CLIENTE', '6. INSTALACIONES', '7. GERENCIAMIENTO'
    ]]);
    
    if (newArrayData.length > 0) {
      const newArrayValuesDg = newArrayData.map(obj => Object.values(obj));
      const numFilas = newArrayValuesDg.length;
      const numColumnas = newArrayValuesDg[0].length;
      formatoSheetDg.getRange(2, 1, numFilas, numColumnas).setValues(newArrayValuesDg);
    } else {
      console.log(`No se encontraron datos para agregar a la hoja Diagnostico - Manual Servicio en ${base}.`);
    }

    formatoSheet.clear();
    formatoSheet.getRange(1, 1, 1, 20).setValues([[
      'País', 'Ciclo', 'Código', 'Concesionario', 'Ciudad', 'Fecha Visita', 'Pregunta', 'Respuesta', 'Proceso', 'Subproceso1', 'Elemento', '#Elemento', 'Sede', 'Base', 'Concatenado', 'conteoP', 'puntajeP', 'aprobacion', 'numPeso', 'porPeso'
    ]]);

    if (nuevosDatos_s.length > 0) {
      const nuevosDatos_sArray = nuevosDatos_s.map(obj => Object.values(obj));
      formatoSheet.getRange(2, 1, nuevosDatos_sArray.length, nuevosDatos_sArray[0].length).setValues(nuevosDatos_sArray);
    } else {
      console.log(`No se encontraron datos para agregar a la hoja 'Formato' en ${base}.`);
    }
    console.timeEnd(`Escribir datos en hojas de resultado para ${base}`);
    console.timeEnd(`Procesar hoja ${base} (${index+1}/${ids.length})`);
  });
  console.timeEnd("Procesar todas las hojas principales");
  console.timeEnd("Función completa");
  console.log("Fin de la función obtenerDatosYActualizar_s()");
}
